#!/bin/bash

# login based on https://www.mediawiki.org/wiki/API:Client_code/Bash

read user password < auth
if [ -z "$user" -o -z "$password" ]; then
    echo "$0: error: no authentication data found in \`auth\` file" >&2
    exit 1
fi
wdapi='http://www.wikidata.org/w/api.php'
api="$wdapi"
cookie_jar="cookies"
user_agent="$user Patroller Bot Development"

latest() {
    if [[ -r latest ]]; then
        stored=$(<latest)
        if [[ "$stored" =~ [0-9]{14} ]]; then
            echo $stored
            return
        fi
    fi
    date -u -d '15 minutes ago' '+%Y%m%d%H%M%S'
}

get() {
    curl -s -S \
         --location \
         --cookie $cookie_jar \
         --cookie-jar $cookie_jar \
         --user-agent "$user_agent" \
         --keepalive-time 60 \
         --header "Accept-Language: en-us" \
         --header "Connection: keep-alive" \
         --compressed \
         --data-urlencode "format=json" \
         "$@" \
         "$api"
}

loggedinuser=$(get \
                   --data-urlencode "action=query" \
                   --data-urlencode "meta=userinfo" |
                      jq --raw-output '.query.userinfo.name')

if [[ "$loggedinuser" != "$user" ]]; then
    #Login part 1
    CR=$(get \
             --data-urlencode "action=login" \
             --data-urlencode "lgname=${user}" \
             --data-urlencode "lgpassword=${password}" \
             --request "POST")
    
    TOKEN=$(echo "$CR" | jq --raw-output .login.token)
    if [ -z "$TOKEN" ]; then
        echo "Login part 1 failed."
        echo $CR
        exit 1
    fi
    
    #Login part 2
    CR=$(get \
             --data-urlencode "action=login" \
             --data-urlencode "lgname=${user}" \
             --data-urlencode "lgpassword=${password}" \
             --data-urlencode "lgtoken=${TOKEN}" \
             --request "POST")
fi

patroltoken=$(get \
    --data-urlencode "action=query" \
    --data-urlencode "meta=tokens" \
    --data-urlencode "type=patrol" |
    jq --raw-output '.query.tokens.patroltoken') || {
    echo "Couldn’t get patrol token" >&2
    exit 1
}
    
changes="$(get \
    --data-urlencode "action=query" \
    --data-urlencode "list=recentchanges" \
    --data-urlencode "rcshow=!patrolled" \
    --data-urlencode "rcnamespace=0" \
    --data-urlencode "rcprop=ids|comment|timestamp" \
    --data-urlencode "rclimit=50" \
    --data-urlencode "rcstart=$(date -u '+%Y%m%d%H%M%S')" \
    --data-urlencode "rcend=$(latest)")"

latestchange=$(jq --raw-output '.query.recentchanges[0].timestamp' <<< "$changes" | tr -d 'TZ:-')
if [[ "$latestchange" =~ [0-9]{14} ]]; then
    echo "$latestchange" > latest
fi

# input: literal start of comments
# output: those revisions matching that start, in the format:
# revid comment
# 212664081 /* clientsitelink-update:0|Xwiki|Xwiki:FOO|Xwiki:BAR */
filterchanges() {
    jq --raw-output '
        .query.recentchanges |
        map(select(.comment | startswith("'"$1"'"))) |
        map((.revid | tostring) + " " + .comment) |
        .[]' <<< "$changes"
}

pagemoves() {
    filterchanges "/* clientsitelink-update:0|"
}
pageremoves() {
    filterchanges "/* clientsitelink-remove:1|| */ "
}

apiurl() {
    if [[ "$1" =~ wiki$ ]]; then
        echo "https://${1%wiki}.wikipedia.org/w/api.php" # ${parameter%word}: remove matching suffix
    else
        return 1
    fi
    # TODO: wikisource, wikivoyage, wikibooks, wikiquote, etc.
}

pagemoves | while read revid comment; do
    wikicode="$(sed 's#^/\* clientsitelink-update:0|\([^|]*\)|.*$#\1#' <<< "$comment")" || continue
    api=$(apiurl "$wikicode") || continue
    # evil sed hackery to make `s` fail if it doesn’t match:
    # t branches to LABEL iff the last `s` matched; q quits with code X; : defines LABEL.
    oldpage="$(sed 's#^/\* clientsitelink-update:0|\([^|]*\)|\1:\([^|]*\)|\1:\(.*\) \*/$#\2#; t ok; q 1; : ok' <<< "$comment")" || continue
    newpage="$(sed 's#^/\* clientsitelink-update:0|\([^|]*\)|\1:\([^|]*\)|\1:\(.*\) \*/$#\3#; t ok; q 1; : ok' <<< "$comment")" || continue
    content="$(get \
                  --data-urlencode "action=query" \
                  --data-urlencode "titles=$newpage" \
                  --data-urlencode "prop=redirects" \
                  --data-urlencode "rdprop=title" |
                  jq '.query.pages | .[] | .redirects | .[] | select(.title == "'"$oldpage"'") | .title')" || continue
    api="$wdapi"
    if [[ -n "$content" ]]; then
        get \
            --data-urlencode "action=patrol" \
            --data-urlencode "token=$patroltoken" \
            --data-urlencode "revid=$revid" \
            --request "POST" > /dev/null
    fi
done

pageremoves
